在官网下载redis:https://redis.io/download
解压到相应的目录：tar -zxvf redis-4.0.14.tar.gz
进入到解压目录，编译redis:make MALLOC=libc
同时在目录下安装redis到相应的目录：make PREFIX=/usr/local/redis install
启动redis服务器端:./redis-server
启动redis客户端：./redis-cli
在解压目录将redis.conf 复制到和安装redis目录的bin目录同级

daemonize no表示:不是守护进程，将no改为yes,一般设置为yes

bind 127.0.0.1：代表只能本机访问，如果需要别的也要访问，需要注释掉

loglevel  :日志记录级别

requirepass ：设置密码,一般需要设置密码

maxclients :设置客户机连接的限制 当maxclient 0，证明没有限制

valotile-lru ：设计定时删除最不常用的数据

redis数据类型（常用）
String 命令（常用）
赋值：set key_name value，如果key存在，就覆盖，不存在就存
            setnx key value ，如果key存在就不写进
取值：get key
删除：del key
应用：保存json数据，做计数器，保存图片

Hash（常用）
存储：hset key field value；key相当于对象，field相当于属性
            hmset users:1 id 20164141 name cc age 23
取值：hget key field
            hgetall users:1
删除：hdel key field
应用：bean对象

list 相当于Java的LinkedList
赋值：lpush key value1 [];从左侧添加
           rpush key value1 [];从右侧添加
取值：lrange key start end;     // -1表示最后一个数
应用：列数据显示，关注列表，粉丝列表，分页，消息队列，任务队列

set 相当于java的hashtable, 数据不重复,无序集合
存值： sadd key value []
取值：smenbers key 返回所有成员
           srandmenber key [count] 返回一个或多个随机成员  //适合用于抽奖
           spop key  [count] 移除并返回集合中的一个或多个随机元素  //适合用于抽奖
           sinter key source1 source2 将source1和source2共有的元素返回并放入destination
应用：随机抽奖，返回共同关注

zset 有序不重复集合，根据值排序
存值：zadd key score number // score->分数 ，number->科目
取值：zrange key start end
应用：分数排行榜


订阅功能
subscribe channel 订阅给定的一个或多个频道的信息
psubscribe pattern  订阅一个或多个符合给定模式的频道
发布信息给订阅的指定频道
publish channel message
退订频道
unsubscribe channel 退订给定的频道
punsubscribe channel 退订所有给定模式的频道
应用场景：即时聊天，群聊，实时信息


redis多数据库
数据库切换 select 数据库
移动数据到指定的数据库：move key  select 数据库

redis事务
1 可以一次执行多个命令
2 将命令序列化，然后按顺序执行，执行过程中，不允许其他命令插入
应有：转账

使用watch监听key,当key被改动，当前事务会被取消

redis淘汰策略

redis持久化：rdb快照，aof

redis缓存与数据库一致性
1.实时同步
如果在redis查询不到key,就查询数据库，无论数据库返回是否为空，都插入到redis
2.异步队列
使用中间件：kafka等消息中间件
做消息队列
3.使用阿里的同步工具canal
mysql主从复制
4.采用udf自定义函数的方式
在数据库中写触发器
5.redis脚本，使用lua解析器执行脚本

缓存穿透

实现高可用高并发有两种方法：垂直扩展，水平扩展
垂直扩展：提高单台服务器的性能，如：更换更大的服务器，增加CPU核数，升级网卡，扩容扩内存
水平扩展：增加服务器数量

主从复制


redis cluster 集群
集群创建
1.在usr/local目录下创建reids_cluster文件夹
2.在redis_cluster文件夹目录下创建6个目录，命名分别为7001~7006
3.把原先安装的redis中的redis.conf和src拷贝到7001~7006每一个文件夹中
4.修改每个redis.conf，主要修改的字段有
	1.绑定服务器的id：bind 服务器id
	2.端口号：port 端口号；建议与文件夹同名
	3.开启后台运行：daemonize yes
	4.启用集群：cluster-enabled yes
5.为了方便一次性启动所有redis服务器，写一个脚本redis.sh如下:
```sh
./7001/src/redis-server ./7001/redis.conf
./7002/src/redis-server ./7002/redis.conf
./7003/src/redis-server ./7003/redis.conf
./7004/src/redis-server ./7004/redis.conf
./7005/src/redis-server ./7005/redis.conf
./7006/src/redis-server ./7006/redis.conf
```
6.将redis安装包下的redis-trib.rb拷贝到usr/local/bin目前下
7.启动集群命令：redis-trib.rb create --replicas 1 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006
8.将redis安装包下src里面的redis-cli拷贝到usr/local/bin目前下
9.启动redis客户端：redis-cli -h 服务器ip -c -h 端口号
